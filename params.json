{
  "name": "Czar-maker-consul",
  "tagline": "Czar Maker implemented in Consul to do leadership election.",
  "body": "# Czar Maker Consul\r\nCzar Maker is a Java lib for leadership election. ***Czar Maker Consul*** uses [Consul](https://www.consul.io/) to do [leadership election](https://www.consul.io/docs/guides/leader-election.html).\r\n\r\n##Getting Started\r\n\r\n#### Maven\r\n```xml\r\n<dependency>\r\n    <groupId>io.advantageous.czarmaker</groupId>\r\n    <artifactId>czar-maker-consul</artifactId>\r\n    <version>0.1.0.RELEASE</version>\r\n</dependency>\r\n```\r\n\r\n#### Gradle\r\n```java\r\ncompile 'io.advantageous.czarmaker:czar-maker-consul:0.1.0.RELEASE'\r\n```\r\n\r\n\r\n\r\n#### Sample usage\r\n```java\r\n\r\nimport io.advantageous.consul.Consul;\r\nimport io.advantageous.czarmaker.Endpoint;\r\nimport io.advantageous.czarmaker.consul.*;\r\nimport io.advantageous.qbit.util.TestTimer;\r\nimport io.advantageous.reakt.promise.Promise;\r\nimport io.advantageous.reakt.promise.Promises;\r\nimport io.advantageous.reakt.reactor.Reactor;\r\nimport io.advantageous.reakt.reactor.TimeSource;\r\n\r\n...\r\n\r\n    private final long sessionTTL = 10;\r\n    private final long newLeaderCheckInterval = 5;\r\n    private ConsulLeadershipElector leadershipElector;\r\n    private Reactor reactor;\r\n    private TestTimer testTimer;\r\n    private Consul consul;\r\n\r\n...\r\n        consul = Consul.consul();\r\n        testTimer = new TestTimer();\r\n        testTimer.setTime();\r\n        reactor = Reactor.reactor(Duration.ofSeconds(30), new TestTimeSource(testTimer));\r\n        final String serviceName = \"foo\";\r\n\r\n        ConsulLeadershipProvider provider = new ConsulLeadershipProvider(serviceName, consul, TimeUnit.SECONDS, sessionTTL);\r\n\r\n        leadershipElector = new ConsulLeadershipElector(provider, serviceName, reactor, TimeUnit.SECONDS,\r\n                sessionTTL, newLeaderCheckInterval);\r\n\r\n\r\n        /** Get the current leader. */\r\n        Promise<Endpoint> promise = Promises.<Endpoint>blockingPromise();\r\n        leadershipElector.getLeader(promise);\r\n\r\n        assertTrue(promise.expect().isEmpty());\r\n\r\n        \r\n        /** Elect this endpoint as the current leader. */\r\n        Promise<Boolean> selfElectPromise = Promises.<Boolean>blockingPromise();\r\n        leadershipElector.selfElect(new Endpoint(\"foo.com\", 9091), selfElectPromise);\r\n\r\n        assertTrue(\"We are now the leader\", selfElectPromise.get());\r\n\r\n\r\n        /** Get the current leader again.  */\r\n        Promise<Endpoint> getLeaderPromise = Promises.<Endpoint>blockingPromise();\r\n        leadershipElector.getLeader(getLeaderPromise);\r\n\r\n        /** See if it present. */\r\n        assertTrue(getLeaderPromise.expect().isPresent());\r\n\r\n        /** See if it has the host foo.com. */\r\n        assertEquals(\"foo.com\", getLeaderPromise.get().getHost());\r\n\r\n        /** See if the port is 9091. */\r\n        assertEquals(9091, getLeaderPromise.get().getPort());\r\n\r\n        testTimer.seconds(100);\r\n\r\n        leadershipElector.process();\r\n\r\n        /** Elect a new leader. */\r\n        leadershipElector.selfElect(new Endpoint(\"foo2.com\", 9092), selfElectPromise);\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}